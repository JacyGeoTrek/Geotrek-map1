<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title></title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.38.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.38.0/mapbox-gl.css' rel='stylesheet' />
    <style>
        body { margin:0; padding:0; }
        #map { position:absolute; top:0; bottom:0; width:100%; }
    </style>
</head>
<body>

<style>
    #menu {
        background: #fff;
        position: absolute;
        z-index: 1;
        top: 10px;
        right: 10px;
        border-radius: 3px;
        width: 120px;
        border: 1px solid rgba(0,0,0,0.4);
        font-family: 'Open Sans', sans-serif;
    }

    #menu a {
        font-size: 13px;
        color: #404040;
        display: block;
        margin: 0;
        padding: 0;
        padding: 10px;
        text-decoration: none;
        border-bottom: 1px solid rgba(0,0,0,0.25);
        text-align: center;
    }

    #menu a:last-child {
        border: none;
    }

    #menu a:hover {
        background-color: #f8f8f8;
        color: #404040;
    }

    #menu a.active {
        background-color: #002E5D;
        color: #ffffff;
    }

    #menu a.active:hover {
        background: #3c74ae;
    }
</style>

<nav id="menu"></nav>
<div id="map"></div>

<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiZ2VvdHJlayIsImEiOiJjajMzZnVucHAwMGFrMndxNmFpMzR5enhtIn0.nNAWTV6f2sRqRIbPkuA0zQ';

    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/geotrek/cj8ul9eusegdk2rpemt0ozxgw',
        zoom: 11.5,
        center: [-111.443884, 57.059996],
        hash: false
    });

    // Initialize places
    places = {};

    // Initialize marker count
    var markerCount = 0;

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            places = JSON.parse(this.response);
            console.log(this);
            addMarkers();
        }
    };

    xhttp.open("GET", "https://cdn.rawgit.com/thatWanderer/json-store/1f055ade/features.geojson", true);
    xhttp.send();

    function createClickPopUp(currentFeature, currentMarkerNumber) {
        var popUps = document.getElementsByClassName('mapboxgl-popup');
        // Check if there is already a popup on the map and if so, remove it
        if (popUps[0]) popUps[0].remove();  

        // Create the popup
        return new mapboxgl.Popup({ closeOnClick: false,})
            .setLngLat(currentFeature.geometry.coordinates)
            .setHTML('<img src="'+currentFeature.properties.URL_IMGUR+'" width="533px" height="400px">')
            .addTo(map);
    }

    function addMarkers() {
        places.features.forEach(function(marker) {
            // create a DOM element for the marker
            var el = document.createElement('div');
            el.className = 'marker';

            el.style.width = '20px';
            el.style.height = '20px';
            el.style.backgroundSize = "contain";
            el.id = "marker-"+markerCount;
            el.dataset.dataurl = marker.properties.URL;
            markerCount++;
            el.addEventListener('mouseenter', function(e) {
                map.getCanvas().style.cursor = 'pointer';
                var currentMarker = e.target.id;
                var currentMarkerNumber = currentMarker.split("-")[1];
            });
            el.addEventListener('mouseleave', function() {
                // Change the cursor style as a UI indicator.
                map.getCanvas().style.cursor = '';
            });
            el.addEventListener('click', function(e) {
                // Query all the rendered points in the view
                var currentMarker = e.target.id;
                var currentMarkerNumber = currentMarker.split("-")[1];
                var features = places.features[currentMarkerNumber];
                if (features) {

                    var clickedPoint = features;
                    // 1. Fly to the point
                    // flyToPlace(clickedPoint);
                    // 2. Close all other popups and display popup for clicked place
                    createClickPopUp(clickedPoint, currentMarkerNumber);
                    // 3. Highlight listing in sidebar (and remove highlight for all other listings)
                    var activeItem = document.getElementsByClassName('active');
                    if (activeItem[0]) {
                        activeItem[0].classList.remove('active');
                    }
                    // Find the index of the place.features that corresponds to the clickedPoint that fired the event listener
                    var selectedFeature = clickedPoint.properties.address;
                    for (var i = 0; i < places.features.length; i++) {
                        if (places.features[i].properties.address === selectedFeature) {
                            selectedFeatureIndex = i;
                        }
                    }
                    // Select the correct list item using the found index and add the active class
                    var listing = document.getElementById('listing-' + selectedFeatureIndex);
                    try {
                        listing.classList.add('active');
                    } catch (e) {
                    }
                }
            });
            // add marker to map
            new mapboxgl.Marker(el, {"offset":[-10,-10]})
                .setLngLat(marker.geometry.coordinates)
                .addTo(map);
        });
    }

        // // Change the cursor to a pointer when the mouse is over the places layer.
        // map.on('mouseenter', 'places', function () {
        //     map.getCanvas().style.cursor = 'pointer';
        // });

        // // Change it back to a pointer when it leaves.
        // map.on('mouseleave', 'places', function () {
        //     map.getCanvas().style.cursor = '';
        // });

</script>

</body>
</html>
